### git hub commands to use ###
## cloning
adding
committing
pushing
branching - separate branch to work with
merging 
pull requests - pull requests implemented on github

installing scm sall code canges made by devs will need to be tracked in scm
devs will user scm to  track their hanges

SCM + CI 

CI will get the code from scm
scm will notify with CI server when code needs to be built 

Before you can begin using git, you need to install and configure it. This lesson will walk you through everything that needs to be done in order to install and configure git, and it will also demonstrate each step.

After completing this lesson, you should be able to install and configure git so that it can authenticate with GitHub.com.

You can find additional documentation on these topics in the following locations:
Git installation instructions: https://git-scm.com/downloads . 

GitHub ssh authentication setup documentation:
https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/

## 

git config -username
git config -email 

ssh key for git 

ssh-keygen -t rsa -b 4096

copy the content of ~/.ssh/id_rsa.pub 
ssh gpg keys to git hub 

>> ssh-key -t rsa -b 4096


################ 

Forks are a useful tool for working with GitHub projects. Forks provide a way for any user to 
create their own personal copy of a GitHub repository which they can fully control without interfering with other users. 
They are widely used in managing open source projects, and they will be used frequently in this course. In this lesson, you will learn how to create a fork of a GitHub repository.

If you want to follow along, the repository used to 
create a fork in this lesson's demonstration can be found here: https://github.com/linuxacademy/cicd-pipeline-train-schedule-git

###############

making changes in 

git clone <repo url>

A crucial part of using git in any CI/CD Pipeline is making code changes. In order to manage changes to source code in git, you need to know how to clone a remote repository, stage changes to source code files, commit them, and push them back to the remote repo.
This lesson will introduce you to a few basic commands that you can use to do this, and it will provide you with a demonstration of their usage. After completing this lesson, you should be able to make changes to source code controlled in git, commit them, and push them to GitHub.
If you want to follow along, you can make a personal fork of the source code repo at https://github.com/linuxacademy/cicd-pipeline-train-schedule-git. Just go to that repo in GitHub and click "fork." Then, when you clone the repo, clone your personal fork with following command (replace with your actual github username):
git clone git@github.com:/cicd-pipeline-train-schedule-git.git
##################

git init 

will initiate the value of the code repo 

add command stages changed files for the next commit 

git add <file>

git status to ; 

git commit -m "Message describing the change"

git add , commit the changes that were staged.

git push 

git push -u <remote name , origin , branch name> should be given ! 
you may need to git clone 

########## git branches and tags ###################
Git branches and tags often play a role in CI/CD automation. You will need a basic understanding
 of these concepts in order to proceed with later steps of implementing a CI/CD Pipeline. 
This lesson provides a brief introduction to git branches and tags. After completing it, 
you should have a basic understanding of what tags and branches are in git.

Branches us branches as part of the daily workflow 

CI|CD pipeline. 

>> git checkout  an existing branch 
>> git checkout <branch>
>> git checkout -b <newbranch> files

git tags - commit id with long randomized string with tags 

git branch 
git status
git checkout -b newbranch
git branch
git checkout master 

git tag myTag - current latest commit gets name as myTag 
git tag 
################### GIt pull reqeuests ########################################

pull request , merged togther,

a pull request to delayed merger takes time and permission and review the changes 
 ######################################## 

 Build automation --- 

 - compiling
 - dependency management 
 - Executing automated tests
 - Packaging the app 

 --- Gradle automation tool , gradle build automation for 
Before you can begin using Gradle to create build automation, you need to be able to install it. This lesson will walk you through the process of installing Gradle. It will also introduce you to a slightly more advanced way of installing and using Gradle, known as the Gradle Wrapper. After completing this lesson, you should be able to install Gradle and the Gradle Wrapper so that you can execute Gradle builds.

You can find more information about installing Gradle at https://gradle.org/install/
Here are the commands used in the demo to install gradle:

cd ~/
wget -O ~/gradle-4.7-bin.zip https://services.gradle.org/distributions/gradle-4.7-bin.zip
sudo yum -y install unzip java-1.8.0-openjdk
sudo mkdir /opt/gradle
sudo unzip -d /opt/gradle/ ~/gradle-4.7-bin.zip
sudo vi /etc/profile.d/gradle.sh
Put this text into gradle.sh:

export PATH=$PATH:/opt/gradle/gradle-4.7/bin
Then set permissions on gradle.sh:

sudo chmod 755 /etc/profile.d/gradle.sh
Finally, after logging out of the server and logging back in:

gradle --version
And the commands used to install and run the Gradle Wrapper:

cd ~/
mkdir my-project
cd my-project
gradle wrapper
./gradlew build

Gradle wrapper - is just a script that invokes a declared version of gradle, downloading it.
beforehand if necessary 

gradle wrapper allows grade to install itself using just the fiels from your projects source control.

installing the gradle wrapper
cd /ur/project/root/directory
gradle wrapper 

add the line .gradle to ur .gitignore file.

This will place a script file in your porjects root directory called gradlew
gradlew.bat for windows systems.

cd /ur/project/root/directory
./gradlew build 


Gradle is a powerful build automation tool, but in order to use it you need to know the basics of how it works. This lesson will guide you through the core concepts of Gradle automation, and it will demonstrate creating a simple build.gradle file. After completing this lesson, you should have a basic working knowledge of how to implement and execute tasks in Gradle.

More more information on Gradle, check out the official Gradle site: https://gradle.org


Here is the final build.gradle from the demo:

plugins {
  id 'com.moowork.node' version '1.2.0'
}

task sayHello  {
  doLast {
    println 'Hello, World!'
  }
}

task anotherTask  {
  doLast {
    println 'This is another task'
  }
}
If you have the gradle wrapper installed in your project (for example, by using gradle init), you can run the build defined in this build.gradle like so:

./gradlew sayHello


grovy script called build.gradle.

gradlew sometask someothertask

this commad will run a task named someTASK and someothertask

definig tasks 
build.gradle file controls what tasks are available for your project.

build.gradle. 

task dependency one task dependency one and another,
later task dependency ---
always run before the task 

we could define the build.gradle
plugins - huge plugins
pre-built tasks and gradle plugins
plugins{

    id pluginid version plugin version 

}


mkdir my-piorject
gradle init 
ls -la 
./gradlew build 


vi build.gradle
tasks sayhello <<{
println "hello,world"

}
tasks sayhelloone << {

    println "Hello world"
}


vi build.gradle 

./gradlew sayhello

------
plugins {

    id 'com.moowork.node' version '1.2.0'

}

task sayHello << {

 printlnt "hello, world"

}

task anotherTASK << {

    println "This is another task"
}

sayhello.dependsOn anotherTASK 


########## automataed testing ##################3

code autoated execution of tests that verify quality and stabilty of code 

biiold proces

unit tests , integration tests , smoke tests and sanity tests 
taskbuild 
task test 
build.dependsONtest

Automated testing is a very important component of a CI/CD Pipeline, and it is often performed using build automation. This lesson introduces the concept of automated testing and covers a few different types of automated tests. It also discusses the basics of executing automated tests in Gradle and demonstrates what that can look like. 
After completing this lesson, you will have a foundational understanding of automated tests that will allow you to incorporate them into the CI/CD Pipeline.


The sample project used in the demo for the lesson can be found on the example-solution branch of this GitHub repo: https://github.com/linuxacademy/cicd-pipeline-train-schedule-gradle

./gradlew npm_test 

task :npm_test 





